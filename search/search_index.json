{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kyopro library docs \u81ea\u4f5c\u306e\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\uff0e\u5b9f\u88c5\u306f \u3053\u3061\u3089 \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 cht.hpp - Convex Hull Trick factorial.hpp - \u968e\u4e57 matrix.hpp - \u884c\u5217 mindist.hpp - \u5358\u4e00\u59cb\u70b9\u6700\u77ed\u7d4c\u8def prime_factorization.hpp - \u7d20\u56e0\u6570\u5206\u89e3 trie_tree.hpp - Trie\u6728 compressor.hpp - \u5ea7\u6a19\u5727\u7e2e \u30de\u30e9\u30bd\u30f3 annealer.hpp - \u713c\u304d\u306a\u307e\u3057\u306e\u6e29\u5ea6\u7ba1\u7406 dice.hpp - \u6574\u6570\u306e\u4e00\u69d8\u4e71\u6570 timer.hpp - \u6642\u9593\u7ba1\u7406","title":"kyopro library docs"},{"location":"#kyopro-library-docs","text":"\u81ea\u4f5c\u306e\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\uff0e\u5b9f\u88c5\u306f \u3053\u3061\u3089","title":"kyopro library docs"},{"location":"#_1","text":"cht.hpp - Convex Hull Trick factorial.hpp - \u968e\u4e57 matrix.hpp - \u884c\u5217 mindist.hpp - \u5358\u4e00\u59cb\u70b9\u6700\u77ed\u7d4c\u8def prime_factorization.hpp - \u7d20\u56e0\u6570\u5206\u89e3 trie_tree.hpp - Trie\u6728 compressor.hpp - \u5ea7\u6a19\u5727\u7e2e","title":"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"},{"location":"#_2","text":"annealer.hpp - \u713c\u304d\u306a\u307e\u3057\u306e\u6e29\u5ea6\u7ba1\u7406 dice.hpp - \u6574\u6570\u306e\u4e00\u69d8\u4e71\u6570 timer.hpp - \u6642\u9593\u7ba1\u7406","title":"\u30de\u30e9\u30bd\u30f3"},{"location":"algorithm/cht/","text":"Convex Hull Trick \u4ee5\u4e0b\u306e2\u3064\u306e\u64cd\u4f5c\u3092\u9ad8\u901f\u306b\u884c\u3046\u30c7\u30fc\u30bf\u69cb\u9020\uff0e \u76f4\u7dda \\(y = a_i x + b_i\\) \u3092\u8ffd\u52a0\u3059\u308b\uff0e \\(\\min_i \\{ a_i x + b_i \\}\\) \u3092\u8a08\u7b97\u3059\u308b\uff0e Warning \u8ffd\u52a0\u3059\u308b\u76f4\u7dda\u7fa4\u306e\u50be\u304d\u304c\u5358\u8abf\u5897\u52a0\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e \u30e1\u30f3\u30d0\u95a2\u6570 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf template < typename T > ConvexHullTrick :: ConvexHullTrick < T > (); \u76f4\u7dda\u306e\u8ffd\u52a0 template < typename T > void ConvexHullTrick :: add ( T a , T b ); \u76f4\u7dda \\(y = ax + b\\) \u3092\u8ffd\u52a0\u3059\u308b\uff0e\u8a08\u7b97\u91cf\u306f\u306a\u3089\u3057 \\(O(1)\\) \uff0e \u30af\u30a8\u30ea template < typename T > T ConvexHullTrick :: get ( T x ); \\(\\min_i \\{ a_i x + b_i \\}\\) \u3092\u8a08\u7b97\u3059\u308b\uff0e\u8a08\u7b97\u91cf\u306f \\(O(\\log N)\\) \uff0e","title":"Convex Hull Trick"},{"location":"algorithm/cht/#convex-hull-trick","text":"\u4ee5\u4e0b\u306e2\u3064\u306e\u64cd\u4f5c\u3092\u9ad8\u901f\u306b\u884c\u3046\u30c7\u30fc\u30bf\u69cb\u9020\uff0e \u76f4\u7dda \\(y = a_i x + b_i\\) \u3092\u8ffd\u52a0\u3059\u308b\uff0e \\(\\min_i \\{ a_i x + b_i \\}\\) \u3092\u8a08\u7b97\u3059\u308b\uff0e Warning \u8ffd\u52a0\u3059\u308b\u76f4\u7dda\u7fa4\u306e\u50be\u304d\u304c\u5358\u8abf\u5897\u52a0\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e","title":"Convex Hull Trick"},{"location":"algorithm/cht/#_1","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"algorithm/cht/#_2","text":"template < typename T > ConvexHullTrick :: ConvexHullTrick < T > ();","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"algorithm/cht/#_3","text":"template < typename T > void ConvexHullTrick :: add ( T a , T b ); \u76f4\u7dda \\(y = ax + b\\) \u3092\u8ffd\u52a0\u3059\u308b\uff0e\u8a08\u7b97\u91cf\u306f\u306a\u3089\u3057 \\(O(1)\\) \uff0e","title":"\u76f4\u7dda\u306e\u8ffd\u52a0"},{"location":"algorithm/cht/#_4","text":"template < typename T > T ConvexHullTrick :: get ( T x ); \\(\\min_i \\{ a_i x + b_i \\}\\) \u3092\u8a08\u7b97\u3059\u308b\uff0e\u8a08\u7b97\u91cf\u306f \\(O(\\log N)\\) \uff0e","title":"\u30af\u30a8\u30ea"},{"location":"algorithm/compressor/","text":"Compressor \u5ea7\u6a19\u5727\u7e2e\u3092\u884c\u3046\u30af\u30e9\u30b9\uff0e \u30e1\u30f3\u30d0\u95a2\u6570 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Compressor :: Compressor ( std :: vector < T > & v ); \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff0e \u5727\u7e2e std :: vector < size_t > Compressor :: compress ( std :: vector < T > & v ); \u5165\u529b v \u3092\u5727\u7e2e\u3057\u305f\u6570\u5217\u3092\u8fd4\u3059\uff0e \u89e3\u51cd T Compressor :: operator []( size_t i ); \u5727\u7e2e\u5f8c\u306e\u6570\u5b57 i \u306b\u5bfe\u5fdc\u3059\u308b\uff0c\u5727\u7e2e\u524d\u306e\u6570\u5024\u3092\u8fd4\u3059\uff0e","title":"Compressor"},{"location":"algorithm/compressor/#compressor","text":"\u5ea7\u6a19\u5727\u7e2e\u3092\u884c\u3046\u30af\u30e9\u30b9\uff0e","title":"Compressor"},{"location":"algorithm/compressor/#_1","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"algorithm/compressor/#_2","text":"Compressor :: Compressor ( std :: vector < T > & v ); \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff0e","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"algorithm/compressor/#_3","text":"std :: vector < size_t > Compressor :: compress ( std :: vector < T > & v ); \u5165\u529b v \u3092\u5727\u7e2e\u3057\u305f\u6570\u5217\u3092\u8fd4\u3059\uff0e","title":"\u5727\u7e2e"},{"location":"algorithm/compressor/#_4","text":"T Compressor :: operator []( size_t i ); \u5727\u7e2e\u5f8c\u306e\u6570\u5b57 i \u306b\u5bfe\u5fdc\u3059\u308b\uff0c\u5727\u7e2e\u524d\u306e\u6570\u5024\u3092\u8fd4\u3059\uff0e","title":"\u89e3\u51cd"},{"location":"algorithm/factorial/","text":"Factorial \u968e\u4e57 \\(n!\\) \u3068\u305d\u306e\u9006\u5143 \\(\\frac{1}{n!}\\) \u3092mod\u3067\u8a08\u7b97\u3059\u308b\uff0e \u95a2\u6570 std :: tuple < std :: vector < long long > , std :: vector < long long > > calc_factorial ( const int n , const long long MOD ); \u6574\u6570 n \u3068\u7d20\u6570 MOD \u306b\u5bfe\u3057\u3066\uff0c \u30bf\u30d7\u30eb (fact, ifact) \u3092\u8fd4\u3059\uff0e fact \uff0c ifact \u306f\u9577\u3055 n \u306e std::vector<long long> \u3067\u3042\u308a\uff0c\u5404\u8981\u7d20\u306e\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\uff0e \\[ \\begin{eqnarray*} &\\mathrm{fact[i]} = i! \\mod \\mathrm{MOD} \\\\ &\\mathrm{ifact[i]} = \\frac{1}{i!} \\mod \\mathrm{MOD} \\end{eqnarray*} \\]","title":"Factorial"},{"location":"algorithm/factorial/#factorial","text":"\u968e\u4e57 \\(n!\\) \u3068\u305d\u306e\u9006\u5143 \\(\\frac{1}{n!}\\) \u3092mod\u3067\u8a08\u7b97\u3059\u308b\uff0e","title":"Factorial"},{"location":"algorithm/factorial/#_1","text":"std :: tuple < std :: vector < long long > , std :: vector < long long > > calc_factorial ( const int n , const long long MOD ); \u6574\u6570 n \u3068\u7d20\u6570 MOD \u306b\u5bfe\u3057\u3066\uff0c \u30bf\u30d7\u30eb (fact, ifact) \u3092\u8fd4\u3059\uff0e fact \uff0c ifact \u306f\u9577\u3055 n \u306e std::vector<long long> \u3067\u3042\u308a\uff0c\u5404\u8981\u7d20\u306e\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\uff0e \\[ \\begin{eqnarray*} &\\mathrm{fact[i]} = i! \\mod \\mathrm{MOD} \\\\ &\\mathrm{ifact[i]} = \\frac{1}{i!} \\mod \\mathrm{MOD} \\end{eqnarray*} \\]","title":"\u95a2\u6570"},{"location":"algorithm/matrix/","text":"Matrix \u884c\u5217\u30af\u30e9\u30b9 Matrix \u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\uff0e \u52a0\u6cd5\uff0c\u4e57\u6cd5\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\uff0e \u30e1\u30f3\u30d0\u95a2\u6570 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Matrix :: Matrix < T > ( int size ); Matrix :: Matrix < T > ( int rows , int cols ); Matrix :: Matrix < T > ( std :: initializer_list < std :: initializer_list < T > > init ); \u30b5\u30a4\u30ba int Matrix::rows (); \u7e26\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\uff0e int Matrix::cols (); \u6a2a\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\uff0e \u6f14\u7b97 Matrix < T > Matrix :: operator - () const ; Matrix < T > & Matrix :: operator += ( const Matrix < T > & m ); Matrix < T > & Matrix :: operator -= ( const Matrix < T > & m ); \u975e\u30e1\u30f3\u30d0\u95a2\u6570 \u6f14\u7b97 Matrix < T > operator + ( const Matrix < T > & m1 , const Matrix < T > & m2 ); Matrix < T > operator - ( const Matrix < T > & m1 , const Matrix < T > & m2 ); Matrix < T > operator * ( const Matrix < T > & m1 , const Matrix < T > & m2 ); Matrix < T > Matrix :: pow ( int n ); \\(n\\) \u4e57\u3092\u8a08\u7b97\u3059\u308b\uff0e\u6b63\u65b9\u884c\u5217\u3067\u306a\u3044\u5834\u5408\u306f\u672a\u5b9a\u7fa9\uff0e\u8a08\u7b97\u91cf\u306f \\(O(H^3\\log{n})\\) . Matrix < T > Matrix :: transpose () const ; \u8ee2\u7f6e\u884c\u5217\u3092\u8a08\u7b97\u3059\u308b\uff0e\u8a08\u7b97\u91cf\u306f \\(O(HW)\\) . \u9759\u7684\u30e1\u30f3\u30d0\u95a2\u6570 static Matrix < T > Matrix :: ones ( const int size ); \u30b5\u30a4\u30ba size * size \u306e\u5358\u4f4d\u884c\u5217\u3092\u8fd4\u3059\uff0e","title":"Matrix"},{"location":"algorithm/matrix/#matrix","text":"\u884c\u5217\u30af\u30e9\u30b9 Matrix \u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\uff0e \u52a0\u6cd5\uff0c\u4e57\u6cd5\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\uff0e","title":"Matrix"},{"location":"algorithm/matrix/#_1","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"algorithm/matrix/#_2","text":"Matrix :: Matrix < T > ( int size ); Matrix :: Matrix < T > ( int rows , int cols ); Matrix :: Matrix < T > ( std :: initializer_list < std :: initializer_list < T > > init );","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"algorithm/matrix/#_3","text":"int Matrix::rows (); \u7e26\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\uff0e int Matrix::cols (); \u6a2a\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\uff0e","title":"\u30b5\u30a4\u30ba"},{"location":"algorithm/matrix/#_4","text":"Matrix < T > Matrix :: operator - () const ; Matrix < T > & Matrix :: operator += ( const Matrix < T > & m ); Matrix < T > & Matrix :: operator -= ( const Matrix < T > & m );","title":"\u6f14\u7b97"},{"location":"algorithm/matrix/#_5","text":"","title":"\u975e\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"algorithm/matrix/#_6","text":"Matrix < T > operator + ( const Matrix < T > & m1 , const Matrix < T > & m2 ); Matrix < T > operator - ( const Matrix < T > & m1 , const Matrix < T > & m2 ); Matrix < T > operator * ( const Matrix < T > & m1 , const Matrix < T > & m2 ); Matrix < T > Matrix :: pow ( int n ); \\(n\\) \u4e57\u3092\u8a08\u7b97\u3059\u308b\uff0e\u6b63\u65b9\u884c\u5217\u3067\u306a\u3044\u5834\u5408\u306f\u672a\u5b9a\u7fa9\uff0e\u8a08\u7b97\u91cf\u306f \\(O(H^3\\log{n})\\) . Matrix < T > Matrix :: transpose () const ; \u8ee2\u7f6e\u884c\u5217\u3092\u8a08\u7b97\u3059\u308b\uff0e\u8a08\u7b97\u91cf\u306f \\(O(HW)\\) .","title":"\u6f14\u7b97"},{"location":"algorithm/matrix/#_7","text":"static Matrix < T > Matrix :: ones ( const int size ); \u30b5\u30a4\u30ba size * size \u306e\u5358\u4f4d\u884c\u5217\u3092\u8fd4\u3059\uff0e","title":"\u9759\u7684\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"algorithm/mindist/","text":"Mindist \u5358\u4e00\u59cb\u70b9\u6700\u77ed\u7d4c\u8def\u3092\u8a08\u7b97\u3059\u308b\uff0e Warning \u52d5\u4f5c\u691c\u8a3c\u304c\u4e0d\u5341\u5206\u3067\u3042\u308b\u305f\u3081\uff0c\u30d0\u30af\u3092\u542b\u3093\u3067\u3044\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059\uff0e \u30e1\u30f3\u30d0\u95a2\u6570 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf mindist_graph :: mindist_graph < Cost > ( int n ); \u9802\u70b9\u6570 n \uff0c\u8fba\u96c6\u5408\u304c\u7a7a\u306e\u30b0\u30e9\u30d5\u3092\u751f\u6210\u3059\u308b\uff0e \u8ffd\u52a0 int mindist_graph::add_edge ( int from , int to , Cost cost , bool bidirected = true ); \u9802\u70b9 from \u304b\u3089\u9802\u70b9 to \u3078\u30b3\u30b9\u30c8 cost \u306e\u8fba\u3092\u8ffd\u52a0\u3059\u308b\uff0e \u6709\u5411\u8fba\u3092\u8ffd\u52a0\u3059\u308b\u3068\u304d\u306f bidirected = false \u3068\u3059\u308b\uff0e \u6700\u77ed\u7d4c\u8def\u306e\u8a08\u7b97 std :: vector < Cost > mindist_graph :: dist ( int s ); \u59cb\u70b9\u3092 s \u3068\u3057\u305f\u3068\u304d\u306e\uff0c\u5404\u9802\u70b9\u307e\u3067\u306e\u6700\u77ed\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\uff0e \u623b\u308a\u5024\u306e\u578b\u306f std::vector<Cost> \u3067\u3042\u308a\uff0c i \u756a\u76ee\u306e\u8981\u7d20\u306f\u9802\u70b9 s \u304b\u3089\u9802\u70b9 i \u3078\u306e\u6700\u77ed\u7d4c\u8def\u3067\u3042\u308b\uff08\u305f\u3060\u3057\uff0c\u9802\u70b9 s \u304b\u3089\u9802\u70b9 i \u3078\u306e\u30d1\u30b9\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\uff0c std::numeric_limits<Cost>::max() \u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\uff09\uff0e \u8fba\u306e\u672c\u6570\u3092 \\(m\\) \u3068\u3059\u308b\u3068\uff0c\u3059\u3079\u3066\u306e\u8fba\u306e\u30b3\u30b9\u30c8\u304c\u975e\u8ca0\u306e\u3068\u304d\uff0c\u8a08\u7b97\u91cf\u306f \\(O((n + m)\\log m)\\) \u3068\u306a\u308b\uff0e \u305d\u3046\u3067\u306f\u306a\u304f\uff0c\u3042\u308b\u8fba\u304c\u8ca0\u306e\u30b3\u30b9\u30c8\u3092\u6301\u3064\u3068\u304d\uff0c\u8a08\u7b97\u91cf\u306f \\(O(nm)\\) \u3068\u306a\u308b\uff0e","title":"Mindist"},{"location":"algorithm/mindist/#mindist","text":"\u5358\u4e00\u59cb\u70b9\u6700\u77ed\u7d4c\u8def\u3092\u8a08\u7b97\u3059\u308b\uff0e Warning \u52d5\u4f5c\u691c\u8a3c\u304c\u4e0d\u5341\u5206\u3067\u3042\u308b\u305f\u3081\uff0c\u30d0\u30af\u3092\u542b\u3093\u3067\u3044\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059\uff0e","title":"Mindist"},{"location":"algorithm/mindist/#_1","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"algorithm/mindist/#_2","text":"mindist_graph :: mindist_graph < Cost > ( int n ); \u9802\u70b9\u6570 n \uff0c\u8fba\u96c6\u5408\u304c\u7a7a\u306e\u30b0\u30e9\u30d5\u3092\u751f\u6210\u3059\u308b\uff0e","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"algorithm/mindist/#_3","text":"int mindist_graph::add_edge ( int from , int to , Cost cost , bool bidirected = true ); \u9802\u70b9 from \u304b\u3089\u9802\u70b9 to \u3078\u30b3\u30b9\u30c8 cost \u306e\u8fba\u3092\u8ffd\u52a0\u3059\u308b\uff0e \u6709\u5411\u8fba\u3092\u8ffd\u52a0\u3059\u308b\u3068\u304d\u306f bidirected = false \u3068\u3059\u308b\uff0e","title":"\u8ffd\u52a0"},{"location":"algorithm/mindist/#_4","text":"std :: vector < Cost > mindist_graph :: dist ( int s ); \u59cb\u70b9\u3092 s \u3068\u3057\u305f\u3068\u304d\u306e\uff0c\u5404\u9802\u70b9\u307e\u3067\u306e\u6700\u77ed\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\uff0e \u623b\u308a\u5024\u306e\u578b\u306f std::vector<Cost> \u3067\u3042\u308a\uff0c i \u756a\u76ee\u306e\u8981\u7d20\u306f\u9802\u70b9 s \u304b\u3089\u9802\u70b9 i \u3078\u306e\u6700\u77ed\u7d4c\u8def\u3067\u3042\u308b\uff08\u305f\u3060\u3057\uff0c\u9802\u70b9 s \u304b\u3089\u9802\u70b9 i \u3078\u306e\u30d1\u30b9\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\uff0c std::numeric_limits<Cost>::max() \u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\uff09\uff0e \u8fba\u306e\u672c\u6570\u3092 \\(m\\) \u3068\u3059\u308b\u3068\uff0c\u3059\u3079\u3066\u306e\u8fba\u306e\u30b3\u30b9\u30c8\u304c\u975e\u8ca0\u306e\u3068\u304d\uff0c\u8a08\u7b97\u91cf\u306f \\(O((n + m)\\log m)\\) \u3068\u306a\u308b\uff0e \u305d\u3046\u3067\u306f\u306a\u304f\uff0c\u3042\u308b\u8fba\u304c\u8ca0\u306e\u30b3\u30b9\u30c8\u3092\u6301\u3064\u3068\u304d\uff0c\u8a08\u7b97\u91cf\u306f \\(O(nm)\\) \u3068\u306a\u308b\uff0e","title":"\u6700\u77ed\u7d4c\u8def\u306e\u8a08\u7b97"},{"location":"algorithm/prime_factorization/","text":"Prime factorization \u4e0e\u3048\u3089\u308c\u305f\u7d20\u6570\u306e\u7d20\u56e0\u6570\u5206\u89e3\u3092\u8a08\u7b97\u3059\u308b\uff0e \u95a2\u6570 std :: vector < std :: pair < long long , long long > > prime_factorization ( long long x ); \u6574\u6570 n \u306e\u7d20\u56e0\u6570\u5206\u89e3\u3092\u8a08\u7b97\u3059\u308b\uff0e \u623b\u308a\u5024\u306e\u578b\u306f std::vector<std::pair<long long, long long> > \uff0e \u5165\u529b\u3057\u305f\u6574\u6570\u304c \\(n = \\Pi_{0 \\le i < m} \\ {p_i}^{e_i}\\) \uff08 \\(p_i\\) \u306f\u7d20\u6570\uff0c \\(p_0 < \\dots < p_{m-1}\\) \uff0c \\(e_i > 0\\) \uff09\u3068\u7d20\u56e0\u6570\u5206\u89e3\u3055\u308c\u308b\u3068\u304d\uff0c\u623b\u308a\u5024\u306e \\(i\\) \u756a\u76ee\u306e\u8981\u7d20\u306f\u7d44 \\((p_i, e_i)\\) \u3068\u306a\u308b\uff0e n \u304c1\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u7a7a\u5217\u3092\u8fd4\u3059\uff0e \u8a08\u7b97\u91cf\u306f \\(O(\\sqrt{n})\\) \uff0e","title":"Prime factorization"},{"location":"algorithm/prime_factorization/#prime-factorization","text":"\u4e0e\u3048\u3089\u308c\u305f\u7d20\u6570\u306e\u7d20\u56e0\u6570\u5206\u89e3\u3092\u8a08\u7b97\u3059\u308b\uff0e","title":"Prime factorization"},{"location":"algorithm/prime_factorization/#_1","text":"std :: vector < std :: pair < long long , long long > > prime_factorization ( long long x ); \u6574\u6570 n \u306e\u7d20\u56e0\u6570\u5206\u89e3\u3092\u8a08\u7b97\u3059\u308b\uff0e \u623b\u308a\u5024\u306e\u578b\u306f std::vector<std::pair<long long, long long> > \uff0e \u5165\u529b\u3057\u305f\u6574\u6570\u304c \\(n = \\Pi_{0 \\le i < m} \\ {p_i}^{e_i}\\) \uff08 \\(p_i\\) \u306f\u7d20\u6570\uff0c \\(p_0 < \\dots < p_{m-1}\\) \uff0c \\(e_i > 0\\) \uff09\u3068\u7d20\u56e0\u6570\u5206\u89e3\u3055\u308c\u308b\u3068\u304d\uff0c\u623b\u308a\u5024\u306e \\(i\\) \u756a\u76ee\u306e\u8981\u7d20\u306f\u7d44 \\((p_i, e_i)\\) \u3068\u306a\u308b\uff0e n \u304c1\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u7a7a\u5217\u3092\u8fd4\u3059\uff0e \u8a08\u7b97\u91cf\u306f \\(O(\\sqrt{n})\\) \uff0e","title":"\u95a2\u6570"},{"location":"algorithm/trie_tree/","text":"Trie tree \u6587\u5b57\u5217\u96c6\u5408\u3092\u6271\u3046\u30c7\u30fc\u30bf\u69cb\u9020\uff0e \u5171\u901a\u306e\u63a5\u982d\u8f9e\u3092\u6301\u3064\u6587\u5b57\u5217\u3092\u307e\u3068\u3081\u3066\u7ba1\u7406\u3059\u308b\u3053\u3068\u3067\uff0c\u6587\u5b57\u5217\u306e\u691c\u7d22\u3092\u9ad8\u901f\u306b\u884c\u3046\uff0e \u30e1\u30f3\u30d0\u95a2\u6570 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf TrieTree :: TrieTree (); \u7a7a\u306eTrie\u6728\u3092\u751f\u6210\u3059\u308b\uff0e \u8ffd\u52a0 void TrieTree::add ( std :: string & s ); Trie\u6728\u306b\u6587\u5b57\u5217 s \u3092\u8ffd\u52a0\u3059\u308b\uff0e\u8a08\u7b97\u91cf\u306f \\(O(|s|)\\) \uff0e \u691c\u7d22 bool TrieTree::find ( std :: string & s ); Trie\u6728\u306b\u6587\u5b57\u5217 s \u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070 true \u3092\u8fd4\u3059\uff0e\u8a08\u7b97\u91cf\u306f \\(O(|s|)\\) \uff0e","title":"Trie tree"},{"location":"algorithm/trie_tree/#trie-tree","text":"\u6587\u5b57\u5217\u96c6\u5408\u3092\u6271\u3046\u30c7\u30fc\u30bf\u69cb\u9020\uff0e \u5171\u901a\u306e\u63a5\u982d\u8f9e\u3092\u6301\u3064\u6587\u5b57\u5217\u3092\u307e\u3068\u3081\u3066\u7ba1\u7406\u3059\u308b\u3053\u3068\u3067\uff0c\u6587\u5b57\u5217\u306e\u691c\u7d22\u3092\u9ad8\u901f\u306b\u884c\u3046\uff0e","title":"Trie tree"},{"location":"algorithm/trie_tree/#_1","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"algorithm/trie_tree/#_2","text":"TrieTree :: TrieTree (); \u7a7a\u306eTrie\u6728\u3092\u751f\u6210\u3059\u308b\uff0e","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"algorithm/trie_tree/#_3","text":"void TrieTree::add ( std :: string & s ); Trie\u6728\u306b\u6587\u5b57\u5217 s \u3092\u8ffd\u52a0\u3059\u308b\uff0e\u8a08\u7b97\u91cf\u306f \\(O(|s|)\\) \uff0e","title":"\u8ffd\u52a0"},{"location":"algorithm/trie_tree/#_4","text":"bool TrieTree::find ( std :: string & s ); Trie\u6728\u306b\u6587\u5b57\u5217 s \u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070 true \u3092\u8fd4\u3059\uff0e\u8a08\u7b97\u91cf\u306f \\(O(|s|)\\) \uff0e","title":"\u691c\u7d22"},{"location":"marathon/annealer/","text":"Annealer \u713c\u304d\u306a\u307e\u3057\u6cd5\u3092\u884c\u3046\u305f\u3081\u306e\u30af\u30e9\u30b9\uff0e \u3042\u308b\u8a55\u4fa1\u5024 \\(E\\) \u3092\u6700\u5927\u5316\u3059\u308b\u554f\u984c\u3092\u8003\u3048\u308b\uff0e \u3042\u308b\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8a55\u4fa1\u5024\u304c \\(\\Delta E\\) \u3060\u3051\u5909\u5316\u3059\u308b\u3068\u304d\uff0c\u4ee5\u4e0b\u306e\u78ba\u7387\u3067\u9077\u79fb\u3092\u884c\u3046\uff0e \\[ P = \\min \\left( \\exp \\left( \\frac{\\Delta E}{T} \\right), 1 \\right) \\] \u3053\u3053\u3067\uff0c \\(T\\) \u306f\u6642\u9593\u3068\u3068\u3082\u306b\u6e1b\u5c11\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b\uff0e \u30e1\u30f3\u30d0\u95a2\u6570 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Annealer :: Annealer ( double temp_start , double temp_end , double time_limit ); \u521d\u671f\u6e29\u5ea6 \\(T_0\\) \u3092 temp_start \uff0c\u63a2\u7d22\u7d42\u4e86\u6642\u306e\u6e29\u5ea6 \\(T_1\\) \u3092 temp_end \uff0c\u63a2\u7d22\u6642\u9593 \\(t_\\mathrm{limit}\\) \u3092 time_limit \u3068\u3057\u3066\u521d\u671f\u5316\u3059\u308b\uff0e \u6e29\u5ea6\u306f\u6642\u523b\u306b\u5bfe\u3057\u3066\u7dda\u5f62\u306b\u5909\u5316\u3057\uff0c\u63a2\u7d22\u7d42\u4e86\u6642\u523b\u4ee5\u964d\u306f\u4e00\u5b9a\u5024 \\(T_1\\) \u3092\u3068\u308b\uff0e \\[ T(t) = \\cases{ T_0 + (T_1 - T_0) \\frac{t}{T_1} & $(0 \\leq t \\leq t_\\mathrm{limit})$ \\cr T_1 & $(t_\\mathrm{limit} \\leq t)$ } \\] \u30af\u30a8\u30ea bool Annealer::modify ( double diff , double time ); \u8a55\u4fa1\u5024\u306e\u5dee\u5206\u3092 diff \uff0c\u6642\u523b\u3092 time \u3092\u5165\u529b\u3068\u3057\u3066\uff0c\u5192\u982d\u306e\u78ba\u7387\u306b\u3057\u305f\u304c\u3063\u3066\u771f\u507d\u5024\u3092\u8fd4\u3059\uff0e","title":"Annealer"},{"location":"marathon/annealer/#annealer","text":"\u713c\u304d\u306a\u307e\u3057\u6cd5\u3092\u884c\u3046\u305f\u3081\u306e\u30af\u30e9\u30b9\uff0e \u3042\u308b\u8a55\u4fa1\u5024 \\(E\\) \u3092\u6700\u5927\u5316\u3059\u308b\u554f\u984c\u3092\u8003\u3048\u308b\uff0e \u3042\u308b\u64cd\u4f5c\u306b\u3088\u3063\u3066\u8a55\u4fa1\u5024\u304c \\(\\Delta E\\) \u3060\u3051\u5909\u5316\u3059\u308b\u3068\u304d\uff0c\u4ee5\u4e0b\u306e\u78ba\u7387\u3067\u9077\u79fb\u3092\u884c\u3046\uff0e \\[ P = \\min \\left( \\exp \\left( \\frac{\\Delta E}{T} \\right), 1 \\right) \\] \u3053\u3053\u3067\uff0c \\(T\\) \u306f\u6642\u9593\u3068\u3068\u3082\u306b\u6e1b\u5c11\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b\uff0e","title":"Annealer"},{"location":"marathon/annealer/#_1","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"marathon/annealer/#_2","text":"Annealer :: Annealer ( double temp_start , double temp_end , double time_limit ); \u521d\u671f\u6e29\u5ea6 \\(T_0\\) \u3092 temp_start \uff0c\u63a2\u7d22\u7d42\u4e86\u6642\u306e\u6e29\u5ea6 \\(T_1\\) \u3092 temp_end \uff0c\u63a2\u7d22\u6642\u9593 \\(t_\\mathrm{limit}\\) \u3092 time_limit \u3068\u3057\u3066\u521d\u671f\u5316\u3059\u308b\uff0e \u6e29\u5ea6\u306f\u6642\u523b\u306b\u5bfe\u3057\u3066\u7dda\u5f62\u306b\u5909\u5316\u3057\uff0c\u63a2\u7d22\u7d42\u4e86\u6642\u523b\u4ee5\u964d\u306f\u4e00\u5b9a\u5024 \\(T_1\\) \u3092\u3068\u308b\uff0e \\[ T(t) = \\cases{ T_0 + (T_1 - T_0) \\frac{t}{T_1} & $(0 \\leq t \\leq t_\\mathrm{limit})$ \\cr T_1 & $(t_\\mathrm{limit} \\leq t)$ } \\]","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"marathon/annealer/#_3","text":"bool Annealer::modify ( double diff , double time ); \u8a55\u4fa1\u5024\u306e\u5dee\u5206\u3092 diff \uff0c\u6642\u523b\u3092 time \u3092\u5165\u529b\u3068\u3057\u3066\uff0c\u5192\u982d\u306e\u78ba\u7387\u306b\u3057\u305f\u304c\u3063\u3066\u771f\u507d\u5024\u3092\u8fd4\u3059\uff0e","title":"\u30af\u30a8\u30ea"},{"location":"marathon/dice/","text":"Dice \u30e9\u30f3\u30c0\u30e0\u306a\u6574\u6570\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\uff0e \u30e1\u30f3\u30d0\u95a2\u6570 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Dice :: Dice ( int n ); Dice :: Dice (( int n , int seed ); 0\u4ee5\u4e0a \\(n\\) \u672a\u6e80\u306e\u6574\u6570\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8fd4\u3059 Dice \u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\uff0e \u30b7\u30fc\u30c9\u5024 seed \u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\uff0c\u30e9\u30f3\u30c0\u30e0\u306b\u30b7\u30fc\u30c9\u5024\u3092\u8a2d\u5b9a\u3059\u308b\uff0e \u30af\u30a8\u30ea int Dice::operator ()(); 0\u4ee5\u4e0a \\(n\\) \u672a\u6e80\u306e\u6574\u6570\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8fd4\u3059\uff0e","title":"Dice"},{"location":"marathon/dice/#dice","text":"\u30e9\u30f3\u30c0\u30e0\u306a\u6574\u6570\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\uff0e","title":"Dice"},{"location":"marathon/dice/#_1","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"marathon/dice/#_2","text":"Dice :: Dice ( int n ); Dice :: Dice (( int n , int seed ); 0\u4ee5\u4e0a \\(n\\) \u672a\u6e80\u306e\u6574\u6570\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8fd4\u3059 Dice \u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\uff0e \u30b7\u30fc\u30c9\u5024 seed \u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\uff0c\u30e9\u30f3\u30c0\u30e0\u306b\u30b7\u30fc\u30c9\u5024\u3092\u8a2d\u5b9a\u3059\u308b\uff0e","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"marathon/dice/#_3","text":"int Dice::operator ()(); 0\u4ee5\u4e0a \\(n\\) \u672a\u6e80\u306e\u6574\u6570\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8fd4\u3059\uff0e","title":"\u30af\u30a8\u30ea"},{"location":"marathon/timer/","text":"Timer \u7d4c\u904e\u6642\u9593\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\uff0e \u30e1\u30f3\u30d0\u95a2\u6570 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Timer :: Timer (); \u30af\u30a8\u30ea double Timer::time (); \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3059\uff0e double Timer::lap (); \u6700\u5f8c\u306b lap() \u3092\u547c\u3073\u51fa\u3057\u305f\u6642\u523b\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3059\uff0e \u521d\u3081\u3066\u547c\u3073\u51fa\u3057\u305f\u5834\u5408\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff0e","title":"Timer"},{"location":"marathon/timer/#timer","text":"\u7d4c\u904e\u6642\u9593\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\uff0e","title":"Timer"},{"location":"marathon/timer/#_1","text":"","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"marathon/timer/#_2","text":"Timer :: Timer ();","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"marathon/timer/#_3","text":"double Timer::time (); \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3059\uff0e double Timer::lap (); \u6700\u5f8c\u306b lap() \u3092\u547c\u3073\u51fa\u3057\u305f\u6642\u523b\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\u3092\u8fd4\u3059\uff0e \u521d\u3081\u3066\u547c\u3073\u51fa\u3057\u305f\u5834\u5408\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\uff0e","title":"\u30af\u30a8\u30ea"}]}